<?php

function probabilistic_weight_field_info() {

  return array(
    'probabilistic_weight' => array(
      'label' => t('Probabilistic weight'),
      'description' => t('Probabilistic weight'),
      'settings' => array(
        'max_length' => 128,
      ),
      'instance_settings' => array(
        'text_processing' => 0,
      ),
      'default_widget' => 'probabilistic_weight_filter',
      'default_formatter' => 'probabilistic_weight_filter_formatter',
    ),
  );

}

function probabilistic_weight_field_is_empty($item, $field) {

  return empty($item['weight']);

}

function probabilistic_weight_field_formatter_info() {

  return array(
    'probabilistic_weight_filter_formatter' => array(
      'label' => t('Text'),
      'field types' => array('probabilistic_weight'),
    ),
  );

}

function probabilistic_weight_field_widget_info() {

  return array(
    'probabilistic_weight_filter' => array(
      'label' => t('Text'),
      'field types' => array('probabilistic_weight'),
    ),
  );

}

function probabilistic_weight_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta = 0) {

  if($field['cardinality'] == 1) {
    $title = $instance['label'];
  } else {
    $title = $instance['label'] . ' (' . $delta . ')';
  }

  $element['weight'] = array(
    '#title' => $title,
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['weight']) ? $items[$delta]['weight'] : 0,
    '#attributes' => array('class' => array('prob_weight_field')),
    '#required' => $instance['required'],
    '#element_validate' => array('probabilistic_weight_validation'),
  );

  return $element;

}

function probabilistic_weight_validation($element, &$form_state) {

  $value = $form_state['input'][$element['#parents'][0]][$element['#parents'][1]][$element['#parents'][2]][$element['#parents'][3]];

  if(!is_numeric($value)) {
    form_set_error(
      $element['#parents'][0],
      t(
        '%field must be numeric.',
        array(
          '%field' => $element['#title'],
        )
      )
    );
  } else if($value < 0) {
    form_set_error(
      $element['#parents'][0],
      t(
        '%field must be greater or equal than 0.',
        array(
          '%field' => $element['#title'],
        )
      )
    );
  } else if($value > 1) {
    form_set_error(
      $element['#parents'][0],
      t(
        '%field must be lower or equal than 1.',
        array(
          '%field' => $element['#title'],
        )
      )
    );
  }

}

function probabilistic_weight_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {

  if($display['type'] == 'probabilistic_weight_filter_formatter') {
    $ret = array();
    if(($items) && (count($items) > 0)) {
      foreach($items as $item) {
        $ret[]= $item['weight'];
      }
    }
    return $ret;
  }

}

function probabilistic_weight_views_api() {

  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'probabilistic_weight') . '/views',
  );

}
